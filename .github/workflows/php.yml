name: PHP CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        id: checkout

      - name: Setup PHP
        id: setup-php
        if: steps.checkout.outcome == 'success'
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          extensions: mbstring, xml, zip, pdo_mysql

      - name: Validate composer.json and composer.lock
        id: composer-validate
        if: steps.setup-php.outcome == 'success'
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        if: steps.composer-validate.outcome == 'success'
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-

      - name: Install dependencies
        id: composer-install
        run: composer install --prefer-dist --no-progress --no-suggest

      - name: Run parallel linting
        id: parallel-lint
        if: steps.composer-install.outcome == 'success'
        run: composer test:lint

      - name: Run tests with PHPUnit
        id: phpunit
        if: steps.parallel-lint.outcome == 'success'
        run: composer test:phpunit

      - name: Run Mutation Testing
        id: infection
        if: steps.phpunit.outcome == 'success'
        run: composer test:infection

      - name: Run static analysis with PHPStan
        id: phpstan
        if: steps.infection.outcome == 'success'
        run: composer test:phpstan

      - name: Run static analysis with phan
        id: phan
        if: steps.phpstan.outcome == 'success'
        run: composer test:phan

      - name: Run static analysis with psalm
        id: psalm
        if: steps.phan.outcome == 'success'
        run: composer test:psalm

      - name: Run rector for code quality
        id: rector
        if: steps.psalm.outcome == 'success'
        run: composer test:rector

      - name: Fetch all tags
        id: fetch-tags
        if: steps.rector.outcome == 'success'
        run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Get latest tag
        id: latest-tag
        if: steps.fetch-tags.outcome == 'success' && steps.rector.outcome == 'success'
        run: |
          echo "LATEST_TAG=$(git tag | sort -V | tail -n1)" >> $GITHUB_ENV

      - name: Increment the minor version
        id: new-tag
        if: env.LATEST_TAG != '' && steps.rector.outcome == 'success'
        run: |
          LATEST_TAG=${{ steps.latest-tag.outputs.tag }}
          MAJOR=$(echo $LATEST_TAG | cut -d. -f1)
          MINOR=$(echo $LATEST_TAG | cut -d. -f2)
          PATCH=$(echo $LATEST_TAG | cut -d. -f3)
          NEW_PATCH=$((PATCH+1))
          NEW_TAG="$MAJOR.$MINOR.$NEW_PATCH"
          echo ::set-output name=new_tag::$NEW_TAG

      - name: Create and push new tag
        id: push-tag
        if: github.ref == 'refs/heads/main' && steps.new-tag.outputs.new_tag != '' && steps.rector.outcome == 'success'
        run: |
          NEW_TAG=${{ steps.new-tag.outputs.new_tag }}
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Get commit messages
        id: get-commits
        if: github.ref == 'refs/heads/main' && steps.rector.outcome == 'success'
        run: |
          LATEST_TAG=${{ steps.latest-tag.outputs.tag }}
          COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --pretty=format:"%h - %s")
          echo "COMMIT_MESSAGES<<EOF" >> $GITHUB_ENV
          echo "$COMMIT_MESSAGES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        if: github.ref == 'refs/heads/main' && steps.push-tag.outcome == 'success' && steps.rector.outcome == 'success'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new-tag.outputs.new_tag }}
          release_name: Release ${{ steps.new-tag.outputs.new_tag }}
          body: |
            Changes included in this release:
            ${{ env.COMMIT_MESSAGES }}
          draft: false
          prerelease: false
